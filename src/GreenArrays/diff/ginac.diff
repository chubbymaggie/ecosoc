diff -bur ./add.cpp ../../bk/ginac-1.6.2/ginac/add.cpp
--- ./add.cpp	2013-11-09 15:53:50.091344790 -0200
+++ ../../bk/ginac-1.6.2/ginac/add.cpp	2011-06-21 16:28:16.000000000 -0300
@@ -30,8 +30,6 @@
 #include "ncmul.h"
 #include "compiler.h"
 
-#include "function.h"
-
 #include <iostream>
 #include <limits>
 #include <stdexcept>
@@ -345,51 +343,6 @@
  *  @param level cut-off in recursive evaluation */
 ex add::eval(int level) const
 {
-  // Handle undefined values.
-	for (epvector::const_iterator i = seq.begin(), end = seq.end();
-       i != end; ++i)
-    if (is_a<symbol>(i->rest) &&
-        ex_to<symbol>(i->rest).get_name() == "undefined")
-      return i->rest;
-
-  // Handle infinity values.
-  bool has_plus_inf = false, has_minus_inf = false;
-	epvector::const_iterator plus_inf = seq.end(), minus_inf = seq.end();
-	for (epvector::const_iterator i = seq.begin(), end = seq.end();
-       i != end; ++i) {
-    if (!is_a<function>(i->rest))
-      continue;
-    if (ex_to<function>(i->rest).get_name() == "inf") {
-      if (ex_to<numeric>(i->rest.op(0)).is_positive()) {
-        if (ex_to<numeric>(i->coeff).is_positive()) {
-          plus_inf = i;
-          if (minus_inf != seq.end())
-            return symbol("undefined");
-        } else {
-          minus_inf = i;
-          if (plus_inf != seq.end())
-            return symbol("undefined");
-        }
-      } else {
-        if (ex_to<numeric>(i->coeff).is_positive()) {
-          minus_inf = i;
-          if (plus_inf != seq.end())
-            return symbol("undefined");
-        } else {
-          plus_inf = i;
-          if (minus_inf != seq.end())
-            return symbol("undefined");
-        }
-      }
-    }
-  }
-
-  if (plus_inf != seq.end()) {
-    return plus_inf->rest;
-  } else if (minus_inf != seq.end()) {
-    return minus_inf->rest;
-  }
-
 	std::auto_ptr<epvector> evaled_seqp = evalchildren(level);
 	if (evaled_seqp.get()) {
 		// do more evaluation later
diff -bur ./inifcns.cpp ../../bk/ginac-1.6.2/ginac/inifcns.cpp
--- ./inifcns.cpp	2013-11-09 15:52:33.362745292 -0200
+++ ../../bk/ginac-1.6.2/ginac/inifcns.cpp	2011-05-10 17:22:53.000000000 -0300
@@ -36,29 +36,9 @@
 
 #include <stdexcept>
 #include <vector>
-#include <stack>
-
-using std::map;
-
-map<GiNaC::symbol*, GiNaC::ex> lower_map;
-//map<GiNaC::symbol, GiNaC::ex> sym_map;
 
 namespace GiNaC {
 
-using std::stack;
-
-GiNaC::symbol undefined() {
-  return symbol("undefined");
-}
-
-GiNaC::symbol bottom() {
-  return symbol("bottom");
-}
-
-GiNaC::symbol top() {
-  return symbol("top");
-}
-
 //////////
 // complex conjugate
 //////////
@@ -899,251 +879,6 @@
                          real_part_func(Order_real_part).
                          imag_part_func(Order_imag_part));
 
-static ex min_eval(const ex & nx, const ex & ny)
-{
-  ex x = nx.eval();
-  ex y = ny.eval();
-
-  if (is_a<symbol>(x) && ex_to<symbol>(x).get_name() == "undefined") 
-    return x;
-  if (is_a<symbol>(y) && ex_to<symbol>(y).get_name() == "undefined") 
-    return y;
-
-  bool is_fn_x = is_exactly_a<function>(x),
-       is_fn_y = is_exactly_a<function>(y);
-  bool is_inf_x = is_fn_x && ex_to<function>(x).get_name() == "inf",
-       is_inf_y = is_fn_y && ex_to<function>(y).get_name() == "inf";
-
-  if (is_inf_x) {
-    if (x.op(0) == numeric(1))
-      return y;
-    if (x.op(0) == numeric(-1))
-      return x;
-  }
-
-  if (is_inf_y) {
-    if (y.op(0) == numeric(1))
-      return x;
-    if (y.op(0) == numeric(-1))
-      return y;
-  }
-
-  ex s = x - y;
-  if (is_exactly_a<numeric>(s)) {
-    if (ex_to<numeric>(s).is_positive())
-      return y;
-    else
-      return x;
-  }
-
-  if (is_exactly_a<numeric>(x)) {
-    ex s = x - y;
-    if (is_exactly_a<numeric>(s))
-      if (!ex_to<numeric>(s).is_negative())
-        return y;
-  }
-
-  if (is_exactly_a<numeric>(y)) {
-    ex s = y - x;
-    if (is_exactly_a<numeric>(s))
-      if (!ex_to<numeric>(s).is_negative())
-        return x;
-  }
-
-  bool is_min_x = is_fn_x && ex_to<function>(x).get_name() == "min",
-       is_max_x = is_fn_x && ex_to<function>(x).get_name() == "max";
-
-  if (is_max_x) {
-    if (x.op(0) == y)
-      return x.op(0);
-    else if (x.op(1) == y)
-      return x.op(1);
-  }
-
-  if (is_min_x) {
-    if (x.op(0) == y)
-      return min(x.op(1), y);
-    else if (x.op(1) == y)
-      return min(x.op(1), y);
-  }
-
-  bool is_min_y = is_fn_y && ex_to<function>(y).get_name() == "min",
-       is_max_y = is_fn_y && ex_to<function>(y).get_name() == "max";
-
-  if (is_max_y) {
-    if (y.op(0) == x)
-      return y.op(0);
-    else if (y.op(1) == x)
-      return y.op(1);
-  }
-
-  if (is_min_y) {
-    if (y.op(0) == x)
-      return min(y.op(1), x);
-    else if (y.op(1) == x)
-      return min(y.op(1), x);
-  }
-
-	return min(x, y).hold();
-}
-
-REGISTER_FUNCTION(min, eval_func(min_eval).
-                       latex_name("\\min"));
-
-static ex max_eval(const ex & nx, const ex & ny)
-{
-  ex x = nx.eval();
-  ex y = ny.eval();
-
-  if (is_a<symbol>(x) && ex_to<symbol>(x).get_name() == "undefined") 
-    return x;
-  if (is_a<symbol>(y) && ex_to<symbol>(y).get_name() == "undefined") 
-    return y;
-
-  bool is_fn_x = is_exactly_a<function>(x),
-       is_fn_y = is_exactly_a<function>(y);
-  bool is_inf_x = is_fn_x && ex_to<function>(x).get_name() == "inf",
-       is_inf_y = is_fn_y && ex_to<function>(y).get_name() == "inf";
-
-  if (is_inf_x) {
-    if (x.op(0) == numeric(1))
-      return x;
-    if (x.op(0) == numeric(-1))
-      return y;
-  }
-
-  if (is_inf_y) {
-    if (y.op(0) == numeric(1))
-      return y;
-    if (y.op(0) == numeric(-1))
-      return x;
-  }
-
-  ex s = x - y;
-  if (is_exactly_a<numeric>(s)) {
-    if (ex_to<numeric>(s).is_positive())
-      return x;
-    else
-      return y;
-  }
-
-  //std::cout << "GINAC: MAX: " << x << " and " << y << "\n";
-
-  if (is_exactly_a<numeric>(x)) {
-    ex s = x - y;
-    if (is_exactly_a<numeric>(s))
-      if (!ex_to<numeric>(s).is_positive())
-        return y;
-  }
-
-  if (is_exactly_a<numeric>(y)) {
-    ex s = y - x;
-    if (is_exactly_a<numeric>(s))
-      if (!ex_to<numeric>(s).is_positive())
-        return x;
-  }
-
-  bool is_min_x = is_fn_x && ex_to<function>(x).get_name() == "min",
-       is_max_x = is_fn_x && ex_to<function>(x).get_name() == "max";
-
-  if (is_max_x) {
-    if (x.op(0) == y)
-      return max(x.op(1), y);
-    else if (x.op(1) == y)
-      return max(x.op(1), y);
-  }
-
-  if (is_min_x) {
-    if (x.op(0) == y)
-      return x.op(0);
-    else if (x.op(1) == y)
-      return x.op(1);
-  }
-
-  bool is_min_y = is_fn_y && ex_to<function>(y).get_name() == "min",
-       is_max_y = is_fn_y && ex_to<function>(y).get_name() == "max";
-
-  if (is_max_y) {
-    if (y.op(0) == x)
-      return min(y.op(1), x);
-    else if (y.op(1) == x)
-      return min(y.op(1), x);
-  }
-
-  if (is_min_y) {
-    if (y.op(0) == x)
-      return y.op(0);
-    else if (y.op(1) == x)
-      return y.op(1);
-  }
-
-  //if (is_exactly_a<numeric>(y)) {
-  //  const ex yy = y;
-  //  for (map<GiNaC::symbol, GiNaC::ex>::iterator it = lower_map.begin(),
-  //       e = lower_map.end(); it != e; ++it) {
-  //    std::cout << " GINAC::Replacing " << it->first << " with " << it->second << "\n";
-  //    yy.subs(it->first == it->second);
-  //  }
-  //  ex s = x - y;
-  //  if (is_exactly_a<numeric>(s)) {
-  //    if (ex_to<numeric>(s).is_positive())
-  //      return x;
-  //    else
-  //      return y;
-  //  }
-  //}
-
-	return max(x, y).hold();
-}
-
-REGISTER_FUNCTION(max, eval_func(max_eval).
-                       latex_name("\\max"));
-
-static ex inf_eval(const ex & x)
-{
-  if (!is_a<numeric>(x))
-    return symbol("undefined");
-  return inf(numeric(ex_to<numeric>(x).is_positive() ? 1 : -1)).hold();
-}
-
-REGISTER_FUNCTION(inf, eval_func(inf_eval).
-                       latex_name("\\inf"));
-
-static ex meet_eval(const ex & x, const ex & y)
-{
-  if (is_a<symbol>(x) && ex_to<symbol>(x).get_name() == "undefined") 
-    return x;
-  if (is_a<symbol>(y) && ex_to<symbol>(y).get_name() == "undefined") 
-    return y;
-
-  bool is_fn_x = is_exactly_a<function>(x),
-       is_fn_y = is_exactly_a<function>(y);
-
-  bool is_top_x = is_fn_x && ex_to<function>(x).get_name() == "top",
-       is_top_y = is_fn_y && ex_to<function>(y).get_name() == "top";
-
-  if (is_top_x) {
-    return x;
-  } else if (is_top_y) {
-    return y;
-  }
-
-  bool is_bottom_x = is_fn_x && ex_to<function>(x).get_name() == "bottom",
-       is_bottom_y = is_fn_y && ex_to<function>(y).get_name() == "bottom";
-
-  if (is_bottom_x) {
-    return x;
-  } else if (is_bottom_y) {
-    return y;
-  }
-
-  return meet(x, y).hold();
-}
-
-
-REGISTER_FUNCTION(meet, eval_func(meet_eval).
-                        latex_name("\\meet"));
-
 //////////
 // Solve linear system
 //////////
diff -bur ./inifcns.h ../../bk/ginac-1.6.2/ginac/inifcns.h
--- ./inifcns.h	2013-11-09 15:56:27.296572965 -0200
+++ ../../bk/ginac-1.6.2/ginac/inifcns.h	2011-05-10 17:22:53.000000000 -0300
@@ -29,11 +29,6 @@
 
 namespace GiNaC {
 
-GiNaC::symbol undefined();
-
-GiNaC::symbol bottom();
-GiNaC::symbol top();
-
 /** Complex conjugate. */
 DECLARE_FUNCTION_1P(conjugate_function)
 
@@ -191,16 +186,6 @@
 /** Order term function (for truncated power series). */
 DECLARE_FUNCTION_1P(Order)
 
-/* Minumum and maximum of two expressions. */
-DECLARE_FUNCTION_2P(min)
-DECLARE_FUNCTION_2P(max)
-
-/* Plus and minus infinity. */
-DECLARE_FUNCTION_1P(inf)
-
-/* Meet. */
-DECLARE_FUNCTION_2P(meet)
-
 ex lsolve(const ex &eqns, const ex &symbols, unsigned options = solve_algo::automatic);
 
 /** Find a real root of real-valued function f(x) numerically within a given
diff -bur ./mul.cpp ../../bk/ginac-1.6.2/ginac/mul.cpp
--- ./mul.cpp	2013-11-09 15:55:33.004148814 -0200
+++ ../../bk/ginac-1.6.2/ginac/mul.cpp	2011-06-21 16:28:16.000000000 -0300
@@ -32,9 +32,6 @@
 #include "symbol.h"
 #include "compiler.h"
 
-#include "inifcns.h"
-#include "function.h"
-
 #include <iostream>
 #include <limits>
 #include <stdexcept>
@@ -444,58 +441,6 @@
  *  @param level cut-off in recursive evaluation */
 ex mul::eval(int level) const
 {
-  // Handles undefined values.
-	for (epvector::const_iterator i = seq.begin(), end = seq.end();
-       i != end; ++i)
-    if (is_a<symbol>(i->rest) &&
-        ex_to<symbol>(i->rest).get_name() == "undefined")
-      return i->rest;
-
-  // TODO:
-  // Handle division by infinity values.
-  // The coeff of each value in seq is the power to which the value is
-  // raised.
-  bool has_plus_inf = false, has_minus_inf = false;
-	for (epvector::const_iterator i = seq.begin(), end = seq.end();
-       i != end; ++i) {
-    if (!is_a<function>(i->rest))
-      continue;
-    if (ex_to<function>(i->rest).get_name() == "inf") {
-      if (ex_to<numeric>(i->rest.op(0)).is_zero() ||
-          ex_to<numeric>(overall_coeff).is_zero())
-        return symbol("undefined");
-      if (ex_to<numeric>(i->rest.op(0)).is_positive()) {
-        if (ex_to<numeric>(i->coeff).is_positive() !=
-            ex_to<numeric>(overall_coeff).is_positive()) {
-          has_minus_inf = true;
-          if (has_plus_inf)
-            return symbol("undefined");
-        } else {
-          has_plus_inf = true;
-          if (has_minus_inf)
-            return symbol("undefined");
-        }
-      } else {
-        if (ex_to<numeric>(i->coeff).is_positive() !=
-            ex_to<numeric>(overall_coeff).is_positive()) {
-          has_plus_inf = true;
-          if (has_minus_inf)
-            return symbol("undefined");
-        } else {
-          has_minus_inf = true;
-          if (has_plus_inf)
-            return symbol("undefined");
-        }
-      }
-    }
-  }
-
-  if (has_plus_inf) {
-    return inf(numeric(1));
-  } else if (has_minus_inf) {
-    return inf(numeric(-1));
-  }
-
 	std::auto_ptr<epvector> evaled_seqp = evalchildren(level);
 	if (evaled_seqp.get()) {
 		// do more evaluation later
